import tkinter as tk
from tkinter import scrolledtext, messagebox
import socket
import json
import base64
from Crypto.Cipher import DES
from hashlib import sha256
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric.padding import PSS, MGF1
from cryptography.exceptions import InvalidSignature

HOST = 'localhost'
PORT = 23456

# ==================== PH·∫¶N C·ª¶A NGUY·ªÑN VƒÇN PH√öC ====================
def generate_rsa_key_pair():
    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    return private_key, private_key.public_key()

def verify_signature(public_key, signature: bytes, data: bytes):
    try:
        public_key.verify(
            signature,
            data,
            PSS(mgf=MGF1(hashes.SHA256()), salt_length=PSS.MAX_LENGTH),
            hashes.SHA256()
        )
        return True
    except InvalidSignature:
        return False

def serialize_public_key(public_key):
    return public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
# ==================== END PH√öC ====================

# ==================== PH·∫¶N C·ª¶A TR·∫¶N VƒÇN PHONG ====================
def decrypt_des(des_key, iv, ciphertext: bytes):
    cipher = DES.new(des_key, DES.MODE_CFB, iv)
    return cipher.decrypt(ciphertext)
# ==================== END PHONG ====================

class SecureMessengerReceiver:
    def __init__(self, root):
        self.root = root
        self.root.title("Secure Messenger - Ng∆∞·ªùi nh·∫≠n")
        self.setup_ui()
        
        # Kh·ªüi t·∫°o RSA
        self.receiver_private_key, self.receiver_public_key = generate_rsa_key_pair()
        self.des_key = None
        self.sender_public_key = None
        self.server_socket = None
        self.client_socket = None

    def setup_ui(self):
        # ==================== PH·∫¶N C·ª¶A PHAN L∆ØU PHONG ====================
        # Frame tr·∫°ng th√°i
        status_frame = tk.LabelFrame(self.root, text="Tr·∫°ng th√°i", padx=10, pady=10)
        status_frame.pack(padx=10, pady=5, fill="x")
        
        tk.Button(status_frame, text="B·∫Øt ƒë·∫ßu l·∫Øng nghe", command=self.start_server).pack(side="left", padx=5)
        self.status_label = tk.Label(status_frame, text="‚ùå Ch∆∞a k·∫øt n·ªëi", fg="red")
        self.status_label.pack(side="left", padx=10)
        
        # Frame tin nh·∫Øn
        msg_frame = tk.LabelFrame(self.root, text="Tin nh·∫Øn nh·∫≠n ƒë∆∞·ª£c", padx=10, pady=10)
        msg_frame.pack(padx=10, pady=5, fill="both", expand=True)
        
        self.message_display = scrolledtext.ScrolledText(msg_frame, height=10, state="disabled")
        self.message_display.pack(fill="both", expand=True)
        
        # Frame log
        log_frame = tk.LabelFrame(self.root, text="Nh·∫≠t k√Ω ho·∫°t ƒë·ªông", padx=10, pady=10)
        log_frame.pack(padx=10, pady=5, fill="both", expand=True)
        
        self.log_area = scrolledtext.ScrolledText(log_frame, height=10, state="disabled")
        self.log_area.pack(fill="both", expand=True)
        # ==================== END PHONG ====================

    def log(self, message):
        self.log_area.config(state="normal")
        self.log_area.insert("end", message + "\n")
        self.log_area.config(state="disabled")
        self.log_area.see("end")

    def display_message(self, message):
        self.message_display.config(state="normal")
        self.message_display.insert("end", message + "\n")
        self.message_display.config(state="disabled")
        self.message_display.see("end")

    def start_server(self):
        try:
            # ==================== PH·∫¶N C·ª¶A L√ä H·ªíNG PHI ====================
            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server_socket.bind((HOST, PORT))
            self.server_socket.listen(1)
            
            self.status_label.config(text="üü° ƒêang ch·ªù k·∫øt n·ªëi...", fg="orange")
            self.log(f"üß≠ ƒêang l·∫Øng nghe t·∫°i {HOST}:{PORT}...")
            
            # Ch·∫°y trong thread ri√™ng ƒë·ªÉ kh√¥ng block GUI
            import threading
            threading.Thread(target=self.accept_connection, daemon=True).start()
            # ==================== END PHI ====================
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh·ªüi ƒë·ªông server th·∫•t b·∫°i: {str(e)}")
            self.log(f"‚ùå L·ªói kh·ªüi ƒë·ªông server: {str(e)}")

    def accept_connection(self):
        try:
            self.client_socket, addr = self.server_socket.accept()
            self.root.after(0, lambda: self.status_label.config(text=f"‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi {addr[0]}", fg="green"))
            self.root.after(0, lambda: self.log(f"üîó ƒê√£ k·∫øt n·ªëi v·ªõi {addr}"))
            
            # ==================== PH·∫¶N C·ª¶A L√ä H·ªíNG PHI ====================
            hello = self.client_socket.recv(1024).decode()
            if hello != "Hello!":
                raise ConnectionError("Handshake failed")
            
            self.client_socket.sendall(b"Ready!")
            self.root.after(0, lambda: self.log("ü§ù Handshake th√†nh c√¥ng"))
            
            # G·ª≠i public key RSA
            self.client_socket.sendall(serialize_public_key(self.receiver_public_key))
            
            # Nh·∫≠n th√¥ng tin x√°c th·ª±c
            secure_data = self.client_socket.recv(4096)
            auth_packet = json.loads(secure_data.decode())
            encrypted_des_key = base64.b64decode(auth_packet["encrypted_des_key"])
            signed_info = base64.b64decode(auth_packet["signed_info"])
            
            # Nh·∫≠n public key c·ªßa sender
            sender_pub_bytes = self.client_socket.recv(4096)
            self.sender_public_key = serialization.load_pem_public_key(sender_pub_bytes)
            
            # ==================== PH·∫¶N C·ª¶A NGUY·ªÑN VƒÇN PH√öC ====================
            if not verify_signature(self.sender_public_key, signed_info, b"sender_id"):
                raise ValueError("Ch·ªØ k√Ω ƒë·ªãnh danh kh√¥ng h·ª£p l·ªá")
            
            self.des_key = self.receiver_private_key.decrypt(
                encrypted_des_key,
                padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()),
                             algorithm=hashes.SHA256(),
                             label=None)
            )
            self.root.after(0, lambda: self.log("üîë ƒê√£ nh·∫≠n kh√≥a DES an to√†n"))
            # ==================== END PH√öC ====================
            
            # B·∫Øt ƒë·∫ßu l·∫Øng nghe tin nh·∫Øn
            self.receive_messages()
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("L·ªói", f"X·ª≠ l√Ω k·∫øt n·ªëi th·∫•t b·∫°i: {str(e)}"))
            self.root.after(0, lambda: self.log(f"‚ùå L·ªói k·∫øt n·ªëi: {str(e)}"))

    def receive_messages(self):
        try:
            while True:
                data = self.client_socket.recv(4096)
                if not data:
                    break
                    
                # ==================== PH·∫¶N C·ª¶A TR·∫¶N VƒÇN PHONG & NGUY·ªÑN VƒÇN PH√öC ====================
                payload = json.loads(data.decode())
                ciphertext = base64.b64decode(payload["cipher"])
                iv = base64.b64decode(payload["iv"])
                msg_hash = payload["hash"]
                signature = base64.b64decode(payload["sig"])
                
                # Ki·ªÉm tra hash
                if sha256(ciphertext).hexdigest() != msg_hash:
                    self.root.after(0, lambda: self.log("‚ùå Hash kh√¥ng kh·ªõp! D·ªØ li·ªáu c√≥ th·ªÉ b·ªã s·ª≠a."))
                    continue
                
                # X√°c th·ª±c ch·ªØ k√Ω
                if not verify_signature(self.sender_public_key, signature, ciphertext):
                    self.root.after(0, lambda: self.log("‚ùå Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá!"))
                    continue
                
                # Gi·∫£i m√£
                plaintext = decrypt_des(self.des_key, iv, ciphertext)
                self.root.after(0, lambda: self.display_message(f"Ng∆∞·ªùi g·ª≠i: {plaintext.decode()}"))
                self.root.after(0, lambda: self.log(f"üì© ƒê√£ nh·∫≠n tin nh·∫Øn b·∫£o m·∫≠t"))
                # ==================== END PHONG & PH√öC ====================
                
        except Exception as e:
            self.root.after(0, lambda: self.log(f"‚ùå L·ªói nh·∫≠n tin nh·∫Øn: {str(e)}"))

if __name__ == "__main__":
    root = tk.Tk()
    app = SecureMessengerReceiver(root)
    root.mainloop()
